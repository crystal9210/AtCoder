・greater<T>:比較関数オブジェクト。2個の要素x,yを比較し、x<yの時にtrueを返す。
関数呼び出し演算子bool operator()(const T& x, const T& y) const をオーバーロードする。

・bool operator()(const T& x, const T& y) const：
bool=返り値
operator():関数呼び出し演算子、C++で関数オブジェクト（ファンクタ）を実現するために使用。関数オブジェクトは、オブジェクトを関数のように呼び出すことができるもので、これにより比較関数をオブジェクトとして扱える。
・(const T& x, const T& y): 関数の引数リストです。この関数は2つの引数を受け取ります。x と y は、比較対象の2つの要素です。const T& は、引数が型 T の定数参照であることを示しています。これにより、引数の値を変更しないことが保証される。
・const(最後の):関数がオブジェクトの状態を変更しないことを示す。
・template<class T>:C++のテンプレートを定義している。


☆オーバーロード：同じ名前の関数や演算子を異なる引数リストやデータ型に対して複数定義することを指す。

☆const T&：定数参照(const reference)：関数への引数や変数の型として使用。特定のデータを保護し、効率的な操作を可能にするために使用。
特徴
①データの変更がされない
②効率的なメモリ使用；データコピーをすることなく、データ本体に対する参照を保持するため、メモリ使用量を削減し、プログラムの効率性を向上させることができる。
③非修飾データへのアクセス：関数が引数の値を変更する処理を記述するとコンパイルエラーが起きる。→不要な副作用を防ぐ。
〇定数参照のテンプレート
const T& variableName;  T:データ型


☆オブジェクトの状態を変更する：そのオブジェクトの内部データやメンバー変数の値を変更することを指す
例:
class MyClass {
public:
    int value;

    int getValue() const {
        // value = 42; // この行はエラーになる
        return value;
    }
};


☆{}:カーリングブレース(波括弧)：関数の宣言において、実際の関数の処理部分を記述したコードブロック
例：
template <typename T>
class MyComparator {
public:
    bool operator()(const T& x, const T& y) const {
        // x と y を比較するコード
        if (x < y) {
            return true;  // x が y より小さい場合は true を返す
        } else {
            return false; // それ以外の場合は false を返す
        }
    }
};

☆自分で定義したベクトル型に対して+演算子をオーバーロードすることで、ベクトル同士の加算を行えるようにすることができる
例：
class Vector {
public:
    int x, y;

    //+演算子のオーバーロードを宣言
    Vector operator+(const Vector& other) {
        Vector result;
        result.x = x + other.x;
        result.y = y + other.y;
        return result;
    }

    
    // Vector オブジェクトを出力するための operator<< 関数を追加
    friend std::ostream& operator<<(std::ostream& os, const Vector& v) {
        os << "(" << v.x << ", " << v.y << ")";
        return os;
    }
};
☆クラスを独自に定義した場合、そのクラスに対して標準出力用の関数を適宜定義する必要がある
☆std::ostream&: std::ostream はC++の標準出力ストリームを表すクラスで、& は参照を意味します。関数は os という名前の出力ストリームを返し、このストリームにデータを出力することができるようになる。main関数内で、ostreamに対応するシンボルにcoutの参照を指定している(渡している)ため、標準出力が結果として可能になっている。


☆cout：C++の標準ライブラリで提供される std::ostream クラスのオブジェクト。
std::ostream クラスは、C++の標準出力ストリームを表すクラス。このクラスは、データを出力するためのインターフェースを提供し、標準出力装置にデータを送信するために使用。std::ostream クラスは、C++の標準ライブラリで事前に定義されたクラスであり、通常は iostream ヘッダーをインクルードすることで利用できる。このクラスはテキストデータやバイナリデータを出力するために使用できる。主なメンバー関数には、データを書き込むための operator<< などが含まれる。

☆一般的にdefineよりusingキーワードを使用した型エイリアスを使うことが推奨される。そっちの方が、コードの可読性と保守性が高まる
