・sort():指定された半いの要素を並び替える標準関数。注意：vec.end():vecの最後の要素を指示するのではなく、最後の要素の次の位置を指示する。

・[](const std::pair<int, int>& a, const std::pair<int, int>& b) {...}:
ラムダ式；無名関数または短い関数オブジェクトを直接定義できる機能。
詳細：
[]：キャプチャクロージャ、外部の変数をラムダ内で使用するための参照やコピーをキャプチャできる。今回は何もキャプチャしていないため、空。
return a.first<b.first;:
ラムダ式本体内の命令。二つのペアを比較し、第一要素が小さいかどうかを判断。

・upper_bound：
動的配列sの中でnew_sizeより大きい最初の要素をs菓子て、その要素へのイテレータを取得する。

・size_t：符号なし整数型。
メリット：
①ポータビリティ：
異なるアーキテクチャ、コンパイラにおいて、この型はメモリ上でオブジェクトを格納するのに十分な大きさを持つことが保証されている。→異なるプラットフォーム間d根のコードの移植性が向上する。
②標準関数との互換性：
 C++の標準ライブラリの多くの関数やメソッド（例：std::string::size(), std::vector::size()）は、サイズやインデックスを返す際に size_t 型を使用します。そのため、これらの関数の戻り値を直接 size_t 型の変数に代入することができ、型の不一致による警告やエラーを避けることができます。
③明示的な意味:
 コードを読む際に size_t を見ると、それがサイズやインデックスを表す変数であることが直感的にわかります。
